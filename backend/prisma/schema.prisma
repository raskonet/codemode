// backend/prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("APP_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TournamentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PairingSystem {
  RANDOM
  SWISS
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  username     String   @unique
  email        String   @unique
  passwordHash String
  rating       Int      @default(1200)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  matchesAsPlayerOne DuelMatch[] @relation("PlayerOneMatches")
  matchesAsPlayerTwo DuelMatch[] @relation("PlayerTwoMatches")

  // Corrected back-relation: Name the relation for clarity
  // This side does NOT define 'fields' because User doesn't hold the foreign key for this.
  organizedTournaments     Tournament[]            @relation("UserOrganizedTournaments")
  tournamentParticipations TournamentParticipant[]
}

model Tournament {
  id          String @id @default(cuid())
  name        String
  organizerId String @db.Uuid
  // This is the side that defines the foreign key relationship
  organizer   User   @relation("UserOrganizedTournaments", fields: [organizerId], references: [id])

  status        TournamentStatus @default(PENDING)
  pairingSystem PairingSystem    @default(RANDOM)

  maxParticipants   Int?
  hasVideo          Boolean  @default(false)
  problemSetType    String   @default("RANDOM_LEETCODE")
  curatedProblemIds String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants TournamentParticipant[]

  @@index([organizerId])
  @@index([status])
}

model TournamentParticipant {
  id           String     @id @default(cuid())
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)

  @@unique([tournamentId, userId])
  @@index([tournamentId])
  @@index([userId])
}

model DuelMatch {
  id              String @id @default(cuid())
  duelId          String
  problemTitle    String
  problemPlatform String

  playerOneId String @db.Uuid
  playerTwoId String @db.Uuid

  playerOneScore Float
  playerTwoScore Float

  playerOneOldRating Int
  playerOneNewRating Int
  playerTwoOldRating Int
  playerTwoNewRating Int

  playedAt DateTime @default(now())

  playerOne User @relation("PlayerOneMatches", fields: [playerOneId], references: [id])
  playerTwo User @relation("PlayerTwoMatches", fields: [playerTwoId], references: [id])

  @@index([duelId])
  @@index([playerOneId])
  @@index([playerTwoId])
  @@index([playedAt])
}
